<div class="related-products"
    data-section-id="{{ section.id }}"
    data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&limit={{ section.settings.grid }}&product_id={{ product.id }}"
    {%- render 'animation-attrs', attrs: 'data-cc-animate' -%}>

  {% if recommendations.performed and recommendations.products_count > 0 %}
    <div class="container{% if settings.use_fullwidth_layout %} container--no-max{% endif %} fully-spaced-row">
      <h4 class="align-center hometitle">{{ section.settings.title }}</h4>

      <div class="collection-listing related-collection">
        <div class="product-grid product-grid--per-row-{{ section.settings.grid }} product-grid--per-row-mob-{{ settings.prod_thumb_mob_per_row }}">
          {%- liquid
            if settings.prod_thumb_shape == 'portrait-23'
              assign chosen_aspect_ratio = 0.67
            elsif settings.prod_thumb_shape == 'portrait-45'
              assign chosen_aspect_ratio = 0.8
            elsif settings.prod_thumb_shape == 'square'
              assign chosen_aspect_ratio = 1.0
            elsif settings.prod_thumb_shape == 'landscape-54'
              assign chosen_aspect_ratio = 1.25
            elsif settings.prod_thumb_shape == 'landscape-32'
              assign chosen_aspect_ratio = 1.50
            elsif settings.prod_thumb_shape == 'tallest'
              assign chosen_aspect_ratio = 99
              for product in recommendations.products
                if product.featured_media.preview_image.aspect_ratio < chosen_aspect_ratio
                  assign chosen_aspect_ratio = product.featured_media.preview_image.aspect_ratio
                endif
              endfor
            else
              assign chosen_aspect_ratio = 0
              for product in recommendations.products
                if product.featured_media.preview_image.aspect_ratio > chosen_aspect_ratio
                  assign chosen_aspect_ratio = product.featured_media.preview_image.aspect_ratio
                endif
              endfor
            endif
          -%}
          {%- for product in recommendations.products -%}
{%- comment -%} Wholesale_Hub_Product_Visibility_For_Loop Start {%- endcomment -%}
{%- capture hide_resource -%}{% render "orbit_wholesale_product_visibility", resource: product %}{%- endcapture -%}
{%- if hide_resource == "true" -%}
  {% continue %}
{%- endif -%}
{%- comment -%} Wholesale_Hub_Product_Visibility_For_Loop End {%- endcomment -%}

{% comment %} Wholesale_Hub_Product_Prices Start {% endcomment %}
{% assign base_product = product %}
{% assign base_variant = product.selected_or_first_available_variant %}
{% assign WCNonFractionalCurrencies = "AFN, ALL, BIF, CLP, DJF, GNF, ISK, JPY, KMF, KRW, LAK, LBP, MGA, MMK, PYG, RSD, RWF, SLL, STD, UGX, VND, VUV, XAF, XOF, XPF, YER" | split: ", "%}

{% assign WCCartUsingNonFractionalCurrency = false %}
{% for non_fractional_currency in WCNonFractionalCurrencies %}
{%- comment -%} Wholesale_Hub_Product_Visibility_For_Loop Start {%- endcomment -%}
{%- capture hide_resource -%}{% render "orbit_wholesale_product_visibility", resource: non_fractional_currency %}{%- endcapture -%}
{%- if hide_resource == "true" -%}
  {% continue %}
{%- endif -%}
{%- comment -%} Wholesale_Hub_Product_Visibility_For_Loop End {%- endcomment -%}

  {% if cart.currency.iso_code == non_fractional_currency %}
    {% assign WCCartUsingNonFractionalCurrency = true %}
  {% endif %}
{% endfor %}


{% assign WCCartUsingSecondaryMarketDiscount = false %}
{% unless shop.metafields.sawholesale.primary_market_id == blank %}
  {% if localization.market.id != shop.metafields.sawholesale.primary_market_id %}
    {% assign WCCartUsingSecondaryMarketDiscount = true %}
  {% endif %}
{% endunless%}

{% if shop.metafields.sawholesale['base_price'] == blank %}
  {% assign base_price = 'compare_at_price' %}
{% else %}
  {% assign base_price = shop.metafields.sawholesale['base_price'] %}
{% endif %}

{% assign saw_discount = 0 %}{% assign saw_has_discount = false %}

{% if customer.tags != blank and WCCartUsingSecondaryMarketDiscount == false %}
  {% for mf in base_product.metafields.sawholesale %}
{%- comment -%} Wholesale_Hub_Product_Visibility_For_Loop Start {%- endcomment -%}
{%- capture hide_resource -%}{% render "orbit_wholesale_product_visibility", resource: mf %}{%- endcapture -%}
{%- if hide_resource == "true" -%}
  {% continue %}
{%- endif -%}
{%- comment -%} Wholesale_Hub_Product_Visibility_For_Loop End {%- endcomment -%}

    {% capture product_customer_tag %}{{ mf | first | replace: 'discount_', '' }}{% endcapture %}
    {% if customer.tags contains product_customer_tag %}
      {% assign saw_has_discount = true %}
      {% assign discount_key = product_customer_tag | prepend: 'discount_' %}
      {% assign price_key = product_customer_tag | prepend: 'price_' %}
      {% assign saw_discount = base_product.metafields.sawholesale[discount_key] | divided_by: 100.0 %}
    {% endif %}
  {% endfor %}
{% endif %}

{% if customer.tags != blank and WCCartUsingSecondaryMarketDiscount == true %}
  {% for collection in base_product.collections %}
{%- comment -%} Wholesale_Hub_Product_Visibility_For_Loop Start {%- endcomment -%}
{%- capture hide_resource -%}{% render "orbit_wholesale_product_visibility", resource: collection %}{%- endcapture -%}
{%- if hide_resource == "true" -%}
  {% continue %}
{%- endif -%}
{%- comment -%} Wholesale_Hub_Product_Visibility_For_Loop End {%- endcomment -%}

    {% for discount in collection.metafields.sawholesale.discounts.value %}
{%- comment -%} Wholesale_Hub_Product_Visibility_For_Loop Start {%- endcomment -%}
{%- capture hide_resource -%}{% render "orbit_wholesale_product_visibility", resource: discount %}{%- endcapture -%}
{%- if hide_resource == "true" -%}
  {% continue %}
{%- endif -%}
{%- comment -%} Wholesale_Hub_Product_Visibility_For_Loop End {%- endcomment -%}

      {% if customer.tags contains discount.tag %}
        {% assign saw_has_discount = true %}
        {% assign this_discount = discount.discount_percent | divided_by: 100.0 %}
        {% if this_discount > saw_discount %}{% assign saw_discount = this_discount %}{% endif %}
      {% endif %}
    {% endfor %}
  {% endfor %}
{% endif %}

{% comment %}
  Rather than calculating the percentage remaining after a discount the secondary
  markets logic uses the raw discount percentage to calculate the saw_variant_price
  For a 10% discount:
    In the primary market the saw_discount would be: 90%
    In the secondary market the saw_discount would be: 10%
{% endcomment %}
{% unless WCCartUsingSecondaryMarketDiscount %}
  {% assign saw_discount = 1 | minus: saw_discount %}
{% endunless %}

{% if WCCartUsingSecondaryMarketDiscount == true or base_price == 'price' or base_variant.compare_at_price == blank or base_variant.compare_at_price == 0 or base_variant.compare_at_price < base_variant.price %}
  {% assign saw_variant_compare_at_price = base_variant.price %}
{% else %}
  {% assign saw_variant_compare_at_price = base_variant.compare_at_price %}
{% endif %}

{% assign cpe = shop.metafields.sawholesale['cpe'] | default: "true" %}

{% if base_variant.metafields.sawholesale[price_key] != blank and cpe == "true" %}
  {% assign saw_variant_price = base_variant.metafields.sawholesale[price_key] %}
{% else %}
  {% comment %}
    For a 10% discount on a variant price of 100:
      In the primary market the saw_variant_price would be: 100 * 0.90 = 90
      In the secondary market the saw_variant_price would be: 100 * 0.10 = 10
      So saw_variant_price is not made available to the global scope in a secondary
      market. Doing so might cause strange behaviour if not properly accounted for.
  {% endcomment %}
  {% if WCCartUsingSecondaryMarketDiscount %}
    {% assign WCVariant_DiscountAmount = saw_variant_compare_at_price | times: saw_discount %}
  {% else %}
    {% assign saw_variant_price = saw_variant_compare_at_price | times: saw_discount %}
    {% assign WCVariant_DiscountAmount = 0 %}
  {% endif %}
{% endif %}
{% if WCCartUsingSecondaryMarketDiscount %}
  {% assign WCVariant_Price = saw_variant_compare_at_price %}
{% else %}
  {% assign WCVariant_Price = saw_variant_price %}
{% endif %}

{% if saw_has_discount == false or saw_variant_price >= saw_variant_compare_at_price %}
  {% assign WCProduct_Price = base_product.price %}
  {% assign WCProduct_ComparePrice = base_product.compare_at_price %}
  {% assign WCProduct_PriceMin = base_product.price_min %}
  {% assign WCProduct_ComparePriceMin = base_product.compare_at_price_min %}
  {% assign WCProduct_PriceMax = base_product.price_max %}
  {% assign WCProduct_ComparePriceMax = base_product.compare_at_price_max %}
  {% assign WCProduct_VariantPrice = base_variant.price %}
  {% assign WCProduct_VariantComparePrice = base_variant.compare_at_price %}
{% else %}
  {% assign WCProduct_Price =  WCVariant_Price | minus: WCVariant_DiscountAmount %}
  {% assign WCProduct_PriceMin = base_product.price_min | times: saw_discount %}
  {% assign WCProduct_PriceMax = base_product.price_max | times: saw_discount %}
  {% assign WCProduct_ComparePrice = saw_variant_compare_at_price %}
  {% if base_product.compare_at_price_min != 0 %}{% assign WCProduct_ComparePriceMin = base_product.compare_at_price_min %}{% else %}{% assign WCProduct_ComparePriceMin = base_product.price_min %}{% endif %}
  {% if base_product.compare_at_price_max != 0 %}{% assign WCProduct_ComparePriceMax = base_product.compare_at_price_max %}{% else %}{% assign WCProduct_ComparePriceMax = base_product.price_max %}{% endif %}
  {% assign WCProduct_VariantPrice = WCVariant_Price | minus: WCVariant_DiscountAmount %}
  {% assign WCProduct_VariantComparePrice = saw_variant_compare_at_price %}
{% endif %}
{% comment %} Wholesale_Hub_Product_Prices End {% endcomment %}

            {% render 'product-block', product: product, custom_aspect_ratio: chosen_aspect_ratio %}
          {%- endfor -%}
        </div>
      </div>

    </div>
  {% endif %}
</div>


{% javascript %}
var loadProductRecommendationsIntoSection = function() {
  // Look for an element with class 'related-products'
  var productRecommendationsSection = document.querySelector(".related-products");
  if (productRecommendationsSection === null) { return; }
  // Create request and submit it using Ajax
  var request = new XMLHttpRequest();
  request.open("GET", productRecommendationsSection.dataset.url);
  request.onload = function() {
    if (request.status >= 200 && request.status < 300) {
      var container = document.createElement("div");
      container.innerHTML = request.response;
      productRecommendationsSection.innerHTML = container.querySelector(".related-products").innerHTML;
    }
  };
  request.send();
};
// fetch when section reloads in editor
document.addEventListener("shopify:section:load", function(event) {
  if (document.querySelector('[data-section-id="' + event.detail.sectionId + '"].related-products')) {
    loadProductRecommendationsIntoSection();
  }
});
// Fetching the recommendations on page load
loadProductRecommendationsIntoSection();
{% endjavascript %}


{% schema %}
{
  "name": "Related products",
  "class": "section-related-products",
  "settings": [
    {
      "type": "paragraph",
      "content": "Dynamic recommendations use order and product information to change and improve over time. [Learn more](https://help.shopify.com/en/themes/development/recommended-products)"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "You may also like"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show product vendor",
      "default": false
    },
    {
      "type": "range",
      "id": "grid",
      "label": "Maximum products to show",
      "min": 2,
      "max": 5,
      "step": 1,
      "default": 4
    }
  ]
}
{% endschema %}
